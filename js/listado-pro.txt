/* //variables glovales
const d = document;
let tablePro = d.querySelector("#table-pro tbody");
let searchInput = d.querySelector("#search-input");
let nameUser = d.querySelector("#nombre-usuario");
let btnLogout = d.querySelector("#btnLogout");


//funcion para poner el nombre del usuario
let getUser = () => {
    let user = JSON.parse(localStorage.getItem("userLogin"));
    nameUser.textContent = user.nombre;
};

//evento para el boton logoout (borrar los datos del localStorage)
btnLogout.addEventListener("click", () =>{
    localStorage.removeItem("userLogin");
    location.href = "../login.html";
});

//evento para probar el campo de buscar
searchInput.addEventListener("keyup", () =>{
    console.log(searchInput.value);
    searchProductoTable();
});

//evento para el navegador
d.addEventListener("DOMContentLoaded", () =>{
    getTableData();
    getUser();
});


//funcion para traer los datos de la base de datos "BD" a la tabla
let getTableData =  async () => {
    let url = "http://localhost/backend-apiCrud/productos";
    try {
        let respuesta = await fetch(url,{
            method: "GET",
            headers: {
                "Content-Type" : "application/json"
            },
        });
        if(respuesta.status === 204) {
            console.log("no hay datos en BD");
        }else{
            let tableData = await respuesta.json();
            console.log(tableData);
            //Agregamos los datos de la tabla al localtorage
            localStorage.setItem("datosTabla", JSON.stringify (tableData));
            //agregamos datos a la tabla
            tableData.forEach((dato, i) => {
                let row = d.createElement("tr");
                row.innerHTML = `
                    <td> ${i} </td>
                    <td> ${dato.nombre} </td>
                    <td> ${dato.descripcion} </td>
                    <td> ${dato.precio} </td>
                    <td> ${dato.stock} </td>
                    <td> <img src =" ${dato.imagen}" width = "100" > </td>
                    <td> 
                        <button id="btn-edit" onclick="editDataTable(${i})" type="button" class="btn btn-warning">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                            </svg>
                        </button> -
                        ${nameUser.textContent == "vendedor" ? "" : 
                        `<button id="btn-delete" onclick="deleteDataTable(${i})" type="button" class="btn btn-danger">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>
                            </svg>
                        </button>`}
                    </td>
                `;
                tablePro.appendChild(row);
            });

        }        
    } catch (error) {
        console.log(error); 
    }
};

//funcion para editar un dato de la tabla
let editDataTable = (pos) => {
    let products = [];
    let productsSave = JSON.parse(localStorage.getItem("datosTabla"));
    if (productsSave != null) {
        products = productsSave;
    }
    let singleProduct = products[pos];
    //console.log(singleProduct);
    localStorage.setItem("ProductEdit", JSON.stringify(singleProduct));
    localStorage.removeItem("datosTabla");
    location.href = "../crear-pro.html";
};

//funcion para eliminar un producto de la tabla
let deleteDataTable = (pos) => {
    let products = [];
    let productsSave = JSON.parse(localStorage.getItem("datosTabla"));
    if (productsSave != null) {
        products = productsSave;
    }
    let singleProduct = products[pos];
    //console.log("Producto a eliminar: "+singleProduct.nombre);
    let IDProduct = {
        id: singleProduct.id
    }
    let confirmar = confirm(`Â¿Seguro que quieres eliminar ${singleProduct.nombre} ?`);
    if (confirmar ) {
        // Llama la funcion para realizar la peticion
        sendDeleteProduct(IDProduct);
    }

};

//funcion para realizar la peticion de un producto
let sendDeleteProduct = async (id) => {
    let url = "http://localhost/backend-apiCrud/productos";
    try {
        let respuesta = await fetch(url,{
            method: "DELETE",
            headers: {
                "Content-Type" : "application/json"
            },
            body: JSON.stringify (id)
        });
        if(respuesta.status === 406) {
            alert("El ID enviado no fue admitido")
        }else{
            let mensaje = await respuesta.json();
            alert(mensaje.message);
            location.reload();

        }        
    } catch (error) {
        console.log(error);
    }
};
 */